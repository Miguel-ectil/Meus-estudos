no index-router
  {
    path: '/blanks/receberlotes',
    name: 'Receber Lotes Estampador',
    component: () => import('@/views/Blanks/AceitarLotes.vue'),
    props: true
  },
=========================================================

no constatnt-menu

      {
        href: '/blanks/receberlotes',
        title: 'Receber Lotes Estampador - Fabricante',
        roles: ['ROLE_F_ADMIN']
      },

================================================================

instalar json-server --watch db.json.

e no package.json do front colocar 

"Script": {
"backend": "json-server --watch db.json",
},

criar arquivo db e dentro dele colocar o json que o glauco mandou
para poder fazer o recebimento dos campos

C:\Users\dvr\Desktop\sistema-dvr\Rastreabilidade-Front\db.json
==================================================================

C:\Users\dvr\Desktop\sistema-dvr\Rastreabilidade-Front\src\views\Blanks\AceitarLotes.vue


<template>
  <div class="container mt-4">
     <center>
    <h1> Receber Devoluções </h1>
    </center>
    <br/>
    <div>
      <b-form-checkbox size="lg">Aceitar devolução</b-form-checkbox>
      <b-form-checkbox size="lg">Cancelar devolução</b-form-checkbox>
    </div>
    <br/>
     <div class="card mt3">
      <div class="card-header">
          <h1 class="label h5 m-0">
          <strong>A ser retornado </strong>
          </h1>
      </div>
      <div class="card-body p-0">
        <b-table :items="Blanks"
                 :fields="fields">
               
        </b-table>
        <div class="row justify-content-center">
          <b-table>  
            <template #cell(adicionar)="data">
              <button id="tooltip-target-3"
                  class="btn btn-sm btn-secondary"
                  @click="editarLote(data.item)">
                <b-icon-pencil-fill />
              </button>
              <b-tooltip target="tooltip-target-3" 
                triggers="hover">
                Editar caixa de saída
              </b-tooltip>
            </template>
          </b-table>
          <b-button-toolbar key-nav
            aria-label="Toolbar with button groups">
          <b-button-group class="mx-1">
            <b-button v-show="paginaAtual + 1 !== paginas + 1 " 
              @click="proximaPagina">
              Próxima
              </b-button>
              <b-button @click="goToUltima">
                Última
              </b-button>
            </b-button-group>
          </b-button-toolbar>  
        </div>   
      </div> 
      <b-button
        @click="getSerialRetorno"
        style="margin: -38px 10px 0px 920px;"
        variant="primary">Receber</b-button> 
    </div>

  </div>
</template>
<script>
  import Blanks from '@/services/blanks/Blanks'

  export default {
    name: 'ConfirmarRecebimentoSerial',
    data () {
      return {
        serial: null,
        lote: {},
        blanks: [],
        form: {
          id: null,
          idEstampador: null
        },
        currentPage: 1,
        perPage: 10,
        fields: [
          {
            key: 'status',
            sortable: true,
            label: 'Status'
          },
          {
            key: 'serial',
            sortable: true,
            label: 'Serial'
          },
          {
            key: 'idEstampador',
            sortable: true,
            label: 'ID.Estampador'
          },
          {
            key: 'cnpj',
            sortable: true,
            label: 'CNPJ',
          },
          {
            key: 'name',
            sortable: true,
            label: 'Nome',
          },
        ]
      }
    },
    computed: {
      rows () {
        return this.blanks.length
      }
    },
    methods: {
      async getSerialRetorno () {
        const req = await fetch('http://localhost:3000/Dados')
        const data = await req.json()
        console.log(data)

        this.idEstampador = data.idEstampador

        // console.log(this.form.id)


        // try {
        //   loader({active: true})
        //   const {data: blanks} = await Blanks.getSerialRetorno(this.form.id)

        //   this.blanks = blanks

        //   this.verifyFields()
        // } catch ({ message, response }) {
        //   if (message && !response) {
        //     return displayMessage(`Erro!`, message , 'error')
        //   }

        //   const { data: {status, message: mensagem} } = response

        //   let text = ''

        //   text += status ? `Status: ${status}` : ''
        //   text += mensagem ? `, ${mensagem}.` : ''

        //   displayMessage(`Erro!`, text , 'error')
        // }finally {
        //   loader({active: false})
        // }
      },
      
      async confirmarRecebimentoSerial () {
        try {
          const res = await displayMessage(
            'Deseja recerber os seriais do estampador?',
            `Ǹúmero do serial: ${this.form.id}`,
            "warning",
            true
          )
          if (!res) return
          loader({active: true})

          const {data} = await Blanks.confirmarRecebimentoSerial(this.form)

          console.log(data)

          this.form.id = null
          this.blanks = []

          displayMessage('Sucesso!', 'Serial recebido  com sucesso!', 'success')

        } catch ({ message, response }) {
          if (message && !response) {
            return displayMessage(`Erro!`, message , 'error')
          }

          const { data: {status, message: mensagem} } = response

          let text = ''

          text += status ? `Status: ${status}` : ''
          text += mensagem ? `, ${mensagem}.` : ''

          displayMessage(`Erro!`, text , 'error')
        }finally {
          loader({active: false})
        }
      },
    }
  }
</script>
<style lang="scss">

</style>
